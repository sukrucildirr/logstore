/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
	ethers,
	EventFilter,
	Signer,
	BigNumber,
	BigNumberish,
	PopulatedTransaction,
	Contract,
	ContractTransaction,
	Overrides,
	PayableOverrides,
	CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface StreamStorageRegistryV2Interface extends ethers.utils.Interface {
	functions: {
		'addAndRemoveStorageNodes(string,address[],address[])': FunctionFragment;
		'addStorageNode(string,address)': FunctionFragment;
		'initialize(address,address,address)': FunctionFragment;
		'isStorageNodeOf(string,address)': FunctionFragment;
		'isTrustedForwarder(address)': FunctionFragment;
		'nodeRegistry()': FunctionFragment;
		'pairs(string,address)': FunctionFragment;
		'removeStorageNode(string,address)': FunctionFragment;
		'setTrustedForwarder(address)': FunctionFragment;
		'streamRegistry()': FunctionFragment;
		'upgradeTo(address)': FunctionFragment;
		'upgradeToAndCall(address,bytes)': FunctionFragment;
	};

	encodeFunctionData(
		functionFragment: 'addAndRemoveStorageNodes',
		values: [string, string[], string[]]
	): string;
	encodeFunctionData(
		functionFragment: 'addStorageNode',
		values: [string, string]
	): string;
	encodeFunctionData(
		functionFragment: 'initialize',
		values: [string, string, string]
	): string;
	encodeFunctionData(
		functionFragment: 'isStorageNodeOf',
		values: [string, string]
	): string;
	encodeFunctionData(
		functionFragment: 'isTrustedForwarder',
		values: [string]
	): string;
	encodeFunctionData(
		functionFragment: 'nodeRegistry',
		values?: undefined
	): string;
	encodeFunctionData(
		functionFragment: 'pairs',
		values: [string, string]
	): string;
	encodeFunctionData(
		functionFragment: 'removeStorageNode',
		values: [string, string]
	): string;
	encodeFunctionData(
		functionFragment: 'setTrustedForwarder',
		values: [string]
	): string;
	encodeFunctionData(
		functionFragment: 'streamRegistry',
		values?: undefined
	): string;
	encodeFunctionData(functionFragment: 'upgradeTo', values: [string]): string;
	encodeFunctionData(
		functionFragment: 'upgradeToAndCall',
		values: [string, BytesLike]
	): string;

	decodeFunctionResult(
		functionFragment: 'addAndRemoveStorageNodes',
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: 'addStorageNode',
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: 'isStorageNodeOf',
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: 'isTrustedForwarder',
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: 'nodeRegistry',
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: 'pairs', data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: 'removeStorageNode',
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: 'setTrustedForwarder',
		data: BytesLike
	): Result;
	decodeFunctionResult(
		functionFragment: 'streamRegistry',
		data: BytesLike
	): Result;
	decodeFunctionResult(functionFragment: 'upgradeTo', data: BytesLike): Result;
	decodeFunctionResult(
		functionFragment: 'upgradeToAndCall',
		data: BytesLike
	): Result;

	events: {
		'Added(string,address)': EventFragment;
		'AdminChanged(address,address)': EventFragment;
		'BeaconUpgraded(address)': EventFragment;
		'Removed(string,address)': EventFragment;
		'Upgraded(address)': EventFragment;
	};

	getEvent(nameOrSignatureOrTopic: 'Added'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'AdminChanged'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'BeaconUpgraded'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'Removed'): EventFragment;
	getEvent(nameOrSignatureOrTopic: 'Upgraded'): EventFragment;
}

export class StreamStorageRegistryV2 extends Contract {
	connect(signerOrProvider: Signer | Provider | string): this;
	attach(addressOrName: string): this;
	deployed(): Promise<this>;

	listeners<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
	): Array<TypedListener<EventArgsArray, EventArgsObject>>;
	off<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>
	): this;
	on<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>
	): this;
	once<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>
	): this;
	removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
		listener: TypedListener<EventArgsArray, EventArgsObject>
	): this;
	removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
		eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
	): this;

	listeners(eventName?: string): Array<Listener>;
	off(eventName: string, listener: Listener): this;
	on(eventName: string, listener: Listener): this;
	once(eventName: string, listener: Listener): this;
	removeListener(eventName: string, listener: Listener): this;
	removeAllListeners(eventName?: string): this;

	queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
		event: TypedEventFilter<EventArgsArray, EventArgsObject>,
		fromBlockOrBlockhash?: string | number | undefined,
		toBlock?: string | number | undefined
	): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

	interface: StreamStorageRegistryV2Interface;

	functions: {
		addAndRemoveStorageNodes(
			streamId: string,
			addNodes: string[],
			removeNodes: string[],
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		'addAndRemoveStorageNodes(string,address[],address[])'(
			streamId: string,
			addNodes: string[],
			removeNodes: string[],
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		addStorageNode(
			streamId: string,
			nodeAddress: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		'addStorageNode(string,address)'(
			streamId: string,
			nodeAddress: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		initialize(
			streamRegistryAddress: string,
			nodeRegistryAddress: string,
			trustedForwarderAddress: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		'initialize(address,address,address)'(
			streamRegistryAddress: string,
			nodeRegistryAddress: string,
			trustedForwarderAddress: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		isStorageNodeOf(
			streamId: string,
			nodeAddress: string,
			overrides?: CallOverrides
		): Promise<[boolean]>;

		'isStorageNodeOf(string,address)'(
			streamId: string,
			nodeAddress: string,
			overrides?: CallOverrides
		): Promise<[boolean]>;

		isTrustedForwarder(
			forwarder: string,
			overrides?: CallOverrides
		): Promise<[boolean]>;

		'isTrustedForwarder(address)'(
			forwarder: string,
			overrides?: CallOverrides
		): Promise<[boolean]>;

		nodeRegistry(overrides?: CallOverrides): Promise<[string]>;

		'nodeRegistry()'(overrides?: CallOverrides): Promise<[string]>;

		pairs(
			arg0: string,
			arg1: string,
			overrides?: CallOverrides
		): Promise<[BigNumber] & { dateCreated: BigNumber }>;

		'pairs(string,address)'(
			arg0: string,
			arg1: string,
			overrides?: CallOverrides
		): Promise<[BigNumber] & { dateCreated: BigNumber }>;

		removeStorageNode(
			streamId: string,
			nodeAddress: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		'removeStorageNode(string,address)'(
			streamId: string,
			nodeAddress: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		setTrustedForwarder(
			forwarder: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		'setTrustedForwarder(address)'(
			forwarder: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		streamRegistry(overrides?: CallOverrides): Promise<[string]>;

		'streamRegistry()'(overrides?: CallOverrides): Promise<[string]>;

		upgradeTo(
			newImplementation: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		'upgradeTo(address)'(
			newImplementation: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		upgradeToAndCall(
			newImplementation: string,
			data: BytesLike,
			overrides?: PayableOverrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;

		'upgradeToAndCall(address,bytes)'(
			newImplementation: string,
			data: BytesLike,
			overrides?: PayableOverrides & { from?: string | Promise<string> }
		): Promise<ContractTransaction>;
	};

	addAndRemoveStorageNodes(
		streamId: string,
		addNodes: string[],
		removeNodes: string[],
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	'addAndRemoveStorageNodes(string,address[],address[])'(
		streamId: string,
		addNodes: string[],
		removeNodes: string[],
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	addStorageNode(
		streamId: string,
		nodeAddress: string,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	'addStorageNode(string,address)'(
		streamId: string,
		nodeAddress: string,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	initialize(
		streamRegistryAddress: string,
		nodeRegistryAddress: string,
		trustedForwarderAddress: string,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	'initialize(address,address,address)'(
		streamRegistryAddress: string,
		nodeRegistryAddress: string,
		trustedForwarderAddress: string,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	isStorageNodeOf(
		streamId: string,
		nodeAddress: string,
		overrides?: CallOverrides
	): Promise<boolean>;

	'isStorageNodeOf(string,address)'(
		streamId: string,
		nodeAddress: string,
		overrides?: CallOverrides
	): Promise<boolean>;

	isTrustedForwarder(
		forwarder: string,
		overrides?: CallOverrides
	): Promise<boolean>;

	'isTrustedForwarder(address)'(
		forwarder: string,
		overrides?: CallOverrides
	): Promise<boolean>;

	nodeRegistry(overrides?: CallOverrides): Promise<string>;

	'nodeRegistry()'(overrides?: CallOverrides): Promise<string>;

	pairs(
		arg0: string,
		arg1: string,
		overrides?: CallOverrides
	): Promise<BigNumber>;

	'pairs(string,address)'(
		arg0: string,
		arg1: string,
		overrides?: CallOverrides
	): Promise<BigNumber>;

	removeStorageNode(
		streamId: string,
		nodeAddress: string,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	'removeStorageNode(string,address)'(
		streamId: string,
		nodeAddress: string,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	setTrustedForwarder(
		forwarder: string,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	'setTrustedForwarder(address)'(
		forwarder: string,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	streamRegistry(overrides?: CallOverrides): Promise<string>;

	'streamRegistry()'(overrides?: CallOverrides): Promise<string>;

	upgradeTo(
		newImplementation: string,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	'upgradeTo(address)'(
		newImplementation: string,
		overrides?: Overrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	upgradeToAndCall(
		newImplementation: string,
		data: BytesLike,
		overrides?: PayableOverrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	'upgradeToAndCall(address,bytes)'(
		newImplementation: string,
		data: BytesLike,
		overrides?: PayableOverrides & { from?: string | Promise<string> }
	): Promise<ContractTransaction>;

	callStatic: {
		addAndRemoveStorageNodes(
			streamId: string,
			addNodes: string[],
			removeNodes: string[],
			overrides?: CallOverrides
		): Promise<void>;

		'addAndRemoveStorageNodes(string,address[],address[])'(
			streamId: string,
			addNodes: string[],
			removeNodes: string[],
			overrides?: CallOverrides
		): Promise<void>;

		addStorageNode(
			streamId: string,
			nodeAddress: string,
			overrides?: CallOverrides
		): Promise<void>;

		'addStorageNode(string,address)'(
			streamId: string,
			nodeAddress: string,
			overrides?: CallOverrides
		): Promise<void>;

		initialize(
			streamRegistryAddress: string,
			nodeRegistryAddress: string,
			trustedForwarderAddress: string,
			overrides?: CallOverrides
		): Promise<void>;

		'initialize(address,address,address)'(
			streamRegistryAddress: string,
			nodeRegistryAddress: string,
			trustedForwarderAddress: string,
			overrides?: CallOverrides
		): Promise<void>;

		isStorageNodeOf(
			streamId: string,
			nodeAddress: string,
			overrides?: CallOverrides
		): Promise<boolean>;

		'isStorageNodeOf(string,address)'(
			streamId: string,
			nodeAddress: string,
			overrides?: CallOverrides
		): Promise<boolean>;

		isTrustedForwarder(
			forwarder: string,
			overrides?: CallOverrides
		): Promise<boolean>;

		'isTrustedForwarder(address)'(
			forwarder: string,
			overrides?: CallOverrides
		): Promise<boolean>;

		nodeRegistry(overrides?: CallOverrides): Promise<string>;

		'nodeRegistry()'(overrides?: CallOverrides): Promise<string>;

		pairs(
			arg0: string,
			arg1: string,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		'pairs(string,address)'(
			arg0: string,
			arg1: string,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		removeStorageNode(
			streamId: string,
			nodeAddress: string,
			overrides?: CallOverrides
		): Promise<void>;

		'removeStorageNode(string,address)'(
			streamId: string,
			nodeAddress: string,
			overrides?: CallOverrides
		): Promise<void>;

		setTrustedForwarder(
			forwarder: string,
			overrides?: CallOverrides
		): Promise<void>;

		'setTrustedForwarder(address)'(
			forwarder: string,
			overrides?: CallOverrides
		): Promise<void>;

		streamRegistry(overrides?: CallOverrides): Promise<string>;

		'streamRegistry()'(overrides?: CallOverrides): Promise<string>;

		upgradeTo(
			newImplementation: string,
			overrides?: CallOverrides
		): Promise<void>;

		'upgradeTo(address)'(
			newImplementation: string,
			overrides?: CallOverrides
		): Promise<void>;

		upgradeToAndCall(
			newImplementation: string,
			data: BytesLike,
			overrides?: CallOverrides
		): Promise<void>;

		'upgradeToAndCall(address,bytes)'(
			newImplementation: string,
			data: BytesLike,
			overrides?: CallOverrides
		): Promise<void>;
	};

	filters: {
		Added(
			streamId: null,
			nodeAddress: string | null
		): TypedEventFilter<
			[string, string],
			{ streamId: string; nodeAddress: string }
		>;

		AdminChanged(
			previousAdmin: null,
			newAdmin: null
		): TypedEventFilter<
			[string, string],
			{ previousAdmin: string; newAdmin: string }
		>;

		BeaconUpgraded(
			beacon: string | null
		): TypedEventFilter<[string], { beacon: string }>;

		Removed(
			streamId: null,
			nodeAddress: string | null
		): TypedEventFilter<
			[string, string],
			{ streamId: string; nodeAddress: string }
		>;

		Upgraded(
			implementation: string | null
		): TypedEventFilter<[string], { implementation: string }>;
	};

	estimateGas: {
		addAndRemoveStorageNodes(
			streamId: string,
			addNodes: string[],
			removeNodes: string[],
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		'addAndRemoveStorageNodes(string,address[],address[])'(
			streamId: string,
			addNodes: string[],
			removeNodes: string[],
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		addStorageNode(
			streamId: string,
			nodeAddress: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		'addStorageNode(string,address)'(
			streamId: string,
			nodeAddress: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		initialize(
			streamRegistryAddress: string,
			nodeRegistryAddress: string,
			trustedForwarderAddress: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		'initialize(address,address,address)'(
			streamRegistryAddress: string,
			nodeRegistryAddress: string,
			trustedForwarderAddress: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		isStorageNodeOf(
			streamId: string,
			nodeAddress: string,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		'isStorageNodeOf(string,address)'(
			streamId: string,
			nodeAddress: string,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		isTrustedForwarder(
			forwarder: string,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		'isTrustedForwarder(address)'(
			forwarder: string,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		nodeRegistry(overrides?: CallOverrides): Promise<BigNumber>;

		'nodeRegistry()'(overrides?: CallOverrides): Promise<BigNumber>;

		pairs(
			arg0: string,
			arg1: string,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		'pairs(string,address)'(
			arg0: string,
			arg1: string,
			overrides?: CallOverrides
		): Promise<BigNumber>;

		removeStorageNode(
			streamId: string,
			nodeAddress: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		'removeStorageNode(string,address)'(
			streamId: string,
			nodeAddress: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		setTrustedForwarder(
			forwarder: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		'setTrustedForwarder(address)'(
			forwarder: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		streamRegistry(overrides?: CallOverrides): Promise<BigNumber>;

		'streamRegistry()'(overrides?: CallOverrides): Promise<BigNumber>;

		upgradeTo(
			newImplementation: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		'upgradeTo(address)'(
			newImplementation: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		upgradeToAndCall(
			newImplementation: string,
			data: BytesLike,
			overrides?: PayableOverrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;

		'upgradeToAndCall(address,bytes)'(
			newImplementation: string,
			data: BytesLike,
			overrides?: PayableOverrides & { from?: string | Promise<string> }
		): Promise<BigNumber>;
	};

	populateTransaction: {
		addAndRemoveStorageNodes(
			streamId: string,
			addNodes: string[],
			removeNodes: string[],
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		'addAndRemoveStorageNodes(string,address[],address[])'(
			streamId: string,
			addNodes: string[],
			removeNodes: string[],
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		addStorageNode(
			streamId: string,
			nodeAddress: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		'addStorageNode(string,address)'(
			streamId: string,
			nodeAddress: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		initialize(
			streamRegistryAddress: string,
			nodeRegistryAddress: string,
			trustedForwarderAddress: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		'initialize(address,address,address)'(
			streamRegistryAddress: string,
			nodeRegistryAddress: string,
			trustedForwarderAddress: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		isStorageNodeOf(
			streamId: string,
			nodeAddress: string,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		'isStorageNodeOf(string,address)'(
			streamId: string,
			nodeAddress: string,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		isTrustedForwarder(
			forwarder: string,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		'isTrustedForwarder(address)'(
			forwarder: string,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		nodeRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		'nodeRegistry()'(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		pairs(
			arg0: string,
			arg1: string,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		'pairs(string,address)'(
			arg0: string,
			arg1: string,
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		removeStorageNode(
			streamId: string,
			nodeAddress: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		'removeStorageNode(string,address)'(
			streamId: string,
			nodeAddress: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		setTrustedForwarder(
			forwarder: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		'setTrustedForwarder(address)'(
			forwarder: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		streamRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

		'streamRegistry()'(
			overrides?: CallOverrides
		): Promise<PopulatedTransaction>;

		upgradeTo(
			newImplementation: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		'upgradeTo(address)'(
			newImplementation: string,
			overrides?: Overrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		upgradeToAndCall(
			newImplementation: string,
			data: BytesLike,
			overrides?: PayableOverrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;

		'upgradeToAndCall(address,bytes)'(
			newImplementation: string,
			data: BytesLike,
			overrides?: PayableOverrides & { from?: string | Promise<string> }
		): Promise<PopulatedTransaction>;
	};
}
